{"version":3,"sources":["components/Loader/Loader.tsx","components/Navbar/Navbar.tsx","pages/HomePage/HomePage.tsx","pages/NotfoundPage/NotfoundPage.tsx","api.ts","components/PersonRow/PersonRow.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage/PeoplePage.tsx","pages/PersonLink/PersonLink.tsx","App.tsx","index.tsx"],"names":["Loader","className","Navbar","locationPathname","useLocation","pathname","role","cn","to","end","HomePage","NotfoundPage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonRow","person","selectPerson","selected","onClick","slug","sex","name","born","died","motherName","fatherName","PeopleTable","people","map","PeoplePage","changeLoading","changeError","changeNoData","useState","setPeople","useEffect","peopleFromServer","mapedPeople","length","catch","selectedPeople","PersonLink","App","loading","setLoading","error","setError","noData","setNoData","path","element","status","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8d7784ca.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nexport const Navbar: React.FC = () => {\n  const locationPathname: string = useLocation().pathname;\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={cn({\n              'navbar-item': true,\n              'has-background-grey-lighter': locationPathname === '/',\n            })}\n            to=\"/\"\n            end\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={cn({\n              'navbar-item': true,\n              'has-background-grey-lighter': locationPathname === '/people',\n            })}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotfoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(1500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n  selectPerson: (slug: string) => void;\n};\n\nexport const PersonRow: React.FC<Props> = ({ person, selectPerson }) => {\n  return (\n    <tr\n      className={cn({ 'has-background-warning': person.selected })}\n      onClick={() => selectPerson(person.slug)}\n    >\n      <td>\n        <Link\n          className={cn({ 'has-text-danger': person.sex === 'f' })}\n          to={`/people/${person.slug}`}\n        >\n          {person.name}\n        </Link>\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>{person.motherName || '-'}</td>\n      <td>{person.fatherName || '-'}</td>\n    </tr>\n  );\n};\n","import { Person } from '../../types';\nimport { PersonRow } from '../PersonRow';\n\ntype Props = {\n  people: Person[];\n  selectPerson: (slug: string) => void;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectPerson }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRow\n            person={person}\n            key={person.slug}\n            selectPerson={selectPerson}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { Person } from '../../types/Person';\n\ntype Props = {\n  changeLoading: (status: boolean) => void;\n  changeError: (status: boolean) => void;\n  changeNoData: (status: boolean) => void;\n};\n\nexport const PeoplePage: React.FC<Props> = ({\n  changeLoading,\n  changeError,\n  changeNoData,\n}) => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const selectPerson = (slug: string) => {\n    const selectedPeople = people.map(person => {\n      if (slug === person.slug) {\n        return ({ ...person, selected: !person.selected });\n      }\n\n      return ({ ...person, selected: false });\n    });\n\n    setPeople(selectedPeople);\n  };\n\n  useEffect(() => {\n    changeLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => {\n        const mapedPeople = peopleFromServer.map(person => ({\n          ...person,\n          selected: false,\n        }));\n\n        setPeople(mapedPeople);\n\n        if (!mapedPeople.length) {\n          changeNoData(true);\n        }\n\n        changeLoading(false);\n      })\n      .catch(() => {\n        changeError(true);\n        changeLoading(false);\n      });\n  }, []);\n\n  return (\n    <PeopleTable people={people} selectPerson={selectPerson} />\n  );\n};\n","export const PersonLink = () => {\n  return (\n    <div>PersonLink</div>\n  );\n};\n","import { useState } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Loader } from './components/Loader';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { NotfoundPage } from './pages/NotfoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { PersonLink } from './pages/PersonLink';\n\nexport const App = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [noData, setNoData] = useState<boolean>(false);\n\n  const changeLoading = (status: boolean) => {\n    setLoading(status);\n  };\n\n  const changeError = (status: boolean) => {\n    setError(status);\n  };\n\n  const changeNoData = (status: boolean) => {\n    setNoData(status);\n  };\n\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={<HomePage />}\n            />\n            <Route\n              path=\"people\"\n              element={(\n                <PeoplePage\n                  changeLoading={changeLoading}\n                  changeError={changeError}\n                  changeNoData={changeNoData}\n                />\n              )}\n            />\n            <Route path=\"/people/:slug\" element={<PersonLink />} />\n            <Route path=\"*\" element={<NotfoundPage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n          </Routes>\n\n          <div className=\"block\">\n            <div className=\"box table-container\">\n              {loading && <Loader />}\n\n              {error && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {noData && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}